{"ast":null,"code":"var _jsxFileName = \"/Users/krasnansky/Documents/Projects/react/01-starting-project 5/src/store/CartProvider.js\",\n    _s = $RefreshSig$();\n\nimport { useReducer } from 'react';\nimport CartContext from \"./cart-context\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst defaultCartState = {\n  items: [],\n  totalAmount: 0\n};\n\nconst cartReducer = (state, action) => {\n  if (action.type === 'ADD') {\n    const updatedTotalAmount = state.totalAmount + action.item.price * action.item.amount;\n    const existingCartItemIndex = state.items.findIndex(item => item.id === action.item.id); //action.item.id\n\n    const existingCartItem = state.items[existingCartItemIndex];\n    let updatedItems;\n\n    if (existingCartItem) {\n      const updatedItem = { ...existingCartItem,\n        amount: existingCartItem.amount + action.item.amount\n      };\n      updatedItems = [...state.items];\n      updatedItems[existingCartItemIndex] = updatedItem;\n    } else {\n      updatedItems = state.items.concat(action.item);\n    } // const updatedItems = state.items.concat(action.item)\n\n\n    return {\n      items: updatedItems,\n      totalAmount: updatedTotalAmount\n    };\n  }\n\n  if (action.type === 'REMOVE') {\n    const existingCartItemIndex = state.items.findIndex(item => item.id === action.id);\n    const existingItem = state.items[existingCartItemIndex];\n    const updatedTotalAmount = state.totalAmount - existingItem.price;\n    let updateItems;\n\n    if (existingItem.amount === 1) {\n      updateItems = state.items.filter(item => item.id !== action.id);\n    } else {\n      const updateItem = { ...existingItem,\n        amount: existingItem.amount - 1\n      };\n      updateItems = [...state.items];\n      updateItems[existingCartItemIndex] = updateItem;\n    }\n\n    return {\n      items: updateItems,\n      totalAmount: updatedTotalAmount\n    };\n  }\n\n  return defaultCartState;\n};\n\nconst CartProvider = props => {\n  _s();\n\n  const [cartState, dispatchCartAction] = useReducer(cartReducer, defaultCartState);\n\n  const addItemToCartHandler = item => {\n    dispatchCartAction({\n      type: 'ADD',\n      item: item\n    });\n  };\n\n  const removeItemFromCartHandler = id => {\n    dispatchCartAction({\n      type: 'REMOVE',\n      id: id\n    });\n  };\n\n  const cartContext = {\n    items: cartState.items,\n    totalAmount: cartState.totalAmount,\n    addItem: addItemToCartHandler,\n    removeItem: removeItemFromCartHandler\n  };\n  return /*#__PURE__*/_jsxDEV(CartContext.Provider, {\n    value: cartContext,\n    children: props.children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 68,\n    columnNumber: 9\n  }, this);\n};\n\n_s(CartProvider, \"PxEugEseoIJIbjFwtAJal5z5ClY=\");\n\n_c = CartProvider;\nexport default CartProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"CartProvider\");","map":{"version":3,"sources":["/Users/krasnansky/Documents/Projects/react/01-starting-project 5/src/store/CartProvider.js"],"names":["useReducer","CartContext","defaultCartState","items","totalAmount","cartReducer","state","action","type","updatedTotalAmount","item","price","amount","existingCartItemIndex","findIndex","id","existingCartItem","updatedItems","updatedItem","concat","existingItem","updateItems","filter","updateItem","CartProvider","props","cartState","dispatchCartAction","addItemToCartHandler","removeItemFromCartHandler","cartContext","addItem","removeItem","children"],"mappings":"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","sourcesContent":["import {useReducer} from 'react';\nimport CartContext from \"./cart-context\";\n\nconst defaultCartState = {\n    items: [],\n    totalAmount: 0\n}\n\nconst cartReducer = (state, action) => {\n    if (action.type === 'ADD') {\n        const updatedTotalAmount = state.totalAmount + action.item.price * action.item.amount\n\n        const existingCartItemIndex = state.items.findIndex(item => item.id === action.item.id) //action.item.id\n        const existingCartItem = state.items[existingCartItemIndex]\n        let updatedItems\n        if (existingCartItem) {\n            const updatedItem = {\n                ...existingCartItem,\n                amount: existingCartItem.amount + action.item.amount\n            }\n            updatedItems = [...state.items]\n            updatedItems[existingCartItemIndex] = updatedItem\n        } else {\n            updatedItems = state.items.concat(action.item)\n        }\n        // const updatedItems = state.items.concat(action.item)\n        return {\n            items: updatedItems,\n            totalAmount: updatedTotalAmount\n        }\n    }\n    if (action.type === 'REMOVE') {\n        const existingCartItemIndex = state.items.findIndex(item => item.id === action.id)\n        const existingItem = state.items[existingCartItemIndex]\n        const updatedTotalAmount = state.totalAmount - existingItem.price\n        let updateItems\n        if (existingItem.amount === 1){\n            updateItems = state.items.filter(item =>  item.id !== action.id)\n        }else {\n            const updateItem = { ...existingItem, amount: existingItem.amount - 1}\n            updateItems =[ ...state.items]\n            updateItems[existingCartItemIndex] = updateItem\n        }\n        return {\n            items: updateItems,\n            totalAmount: updatedTotalAmount\n        }\n    }\n    return defaultCartState\n}\n\nconst CartProvider = (props) => {\n    const [cartState, dispatchCartAction] = useReducer(cartReducer, defaultCartState)\n\n    const addItemToCartHandler = (item) => {\n        dispatchCartAction({type: 'ADD', item: item})\n    }\n    const removeItemFromCartHandler = (id) => {\n        dispatchCartAction({type: 'REMOVE', id: id})\n    }\n    const cartContext = {\n        items: cartState.items,\n        totalAmount: cartState.totalAmount,\n        addItem: addItemToCartHandler,\n        removeItem: removeItemFromCartHandler\n    }\n    return (\n        <CartContext.Provider value={cartContext}>\n            {props.children}\n        </CartContext.Provider>\n    );\n};\n\nexport default CartProvider;\n"]},"metadata":{},"sourceType":"module"}